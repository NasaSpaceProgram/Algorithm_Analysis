from copy import deepcopy
from math import inf 

def nextD(D,k):
    d = deepcopy(D)
    for i in range(len(d)):
        for j in range(len(d[i])):
            d[i][j] = min([D[i][j], D[i][k]+D[k][j]])
    return(d)

def Floyds(W):
    D = W
    for k in range(len(W)):
        D = nextD(D,k)
    return(D)

W = [
    [0,1,inf,1,5],
    [9,0,3,2,inf],
    [inf,inf,0,4,inf],
    [inf,inf,2,0,3],
    [3,inf,inf,inf,0]
]

d = Floyds(W)
for i in d:
    print(i)















#D =[
#    [0,1,4,1,5],
#    [9,0,3,2,14],
#    [inf,inf,0,4,inf],
#    [inf,inf,2,0,3],
#    [3,4,7,4,0],
#]






#d = nextD(D,1)
#for i in d:
#    print(i)